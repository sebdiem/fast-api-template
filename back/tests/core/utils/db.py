"""Database testing utilities."""

import re
from contextlib import contextmanager
from threading import local

# Thread-local storage for query counting
_query_counter = local()


def _get_query_count():
    """Get current query count for this thread."""
    return getattr(_query_counter, "count", 0)


def _get_executed_queries():
    """Get list of executed queries for this thread."""
    return getattr(_query_counter, "queries", [])


def _reset_query_count():
    """Reset query count and query list for this thread."""
    _query_counter.count = 0
    _query_counter.queries = []


def _remove_test_savepoints():
    """Removes first and last queries that are related to the test savepoint generated by begin_nested."""
    savepoint_pattern = r"^\s*(SAVEPOINT|RELEASE SAVEPOINT|ROLLBACK TO SAVEPOINT)\s+sa_savepoint_\d+\s*$"
    cleaned_queries = []
    for query in _query_counter.queries:
        if bool(re.match(savepoint_pattern, query.strip(), re.IGNORECASE)):
            continue
        cleaned_queries.append(query)
    _query_counter.count = len(cleaned_queries)
    _query_counter.queries = cleaned_queries


def increment_query_count(query_text=None):
    """Increment query count and store query text for this thread."""
    if not hasattr(_query_counter, "count"):
        _query_counter.count = 0
        _query_counter.queries = []

    if query_text is not None:
        query_str = str(query_text)

        # Store first 100 chars of the query
        truncated_query = query_str[:100]
        if len(query_str) > 100:
            truncated_query += "..."
        _query_counter.queries.append(truncated_query)

    _query_counter.count += 1


@contextmanager
def assert_num_queries(expected_count, ignore_test_savepoints: bool = True):
    """Assert that exactly expected_count database queries are executed.

    Usage:
        with assert_num_queries(0):
            # code that should not hit the database
            response = client.get("/endpoint")

        with assert_num_queries(2):
            # code that should execute exactly 2 queries
            user = factory.create(User)
            user.save()
    """
    _reset_query_count()
    yield

    if ignore_test_savepoints:
        _remove_test_savepoints()
    actual_count = _get_query_count()
    if actual_count != expected_count:
        executed_queries = _get_executed_queries()
        query_info = ""
        if executed_queries:
            query_info = "\nExecuted queries:\n" + "\n".join(
                f"  {i + 1}. {q}" for i, q in enumerate(executed_queries)
            )

        raise AssertionError(
            f"Expected {expected_count} database queries, but {actual_count} were executed{query_info}"
        )
